@page "/employee/{employeeId:guid}/details"
@using Cas.SaaS.Contracts.Employee;
@using Cas.SaaS.Shared;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager navigationManager
@inject Helpers.HttpClientHelper Http
@attribute [Authorize(Roles = "Client")]

<PageTitle>Детали сотрудника</PageTitle>

@if (employeeDetail is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else if (employeeDetail.Id == Guid.Empty)
{
    <div class="text-center">
        <p>Данного сотрудника нет в системе!</p>
    </div>
}
else
{
    <div>
        <h4>Данные о сотруднике</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">
                ФИО
            </dt>
            <dd class="col-sm-10">
                @employeeDetail.Surname @employeeDetail.Name @employeeDetail.Patronymic
            </dd>
            <dt class="col-sm-2">
                Номер телефона
            </dt>
            <dd class="col-sm-10">
                @employeeDetail.Phone
            </dd>
            <dt class="col-sm-2">
                Почтовый адрес
            </dt>
            <dd class="col-sm-10">
                @employeeDetail.Email
            </dd>
            <dt class="col-sm-2">
                Активен ли
            </dt>
            <dd class="col-sm-10">
                @(employeeDetail.IsActive ? "Да" : "Нет")
            </dd>
        </dl>
    </div>
}

@code {
    [Parameter]
    public Guid employeeId { get; set; }

    private EmployeeDetailDto? employeeDetail;

    protected override async Task OnInitializedAsync()
    {
        employeeDetail = await Http.GetEmployeeByIdAsync(employeeId);
    }
}