@page "/employee/{employeeId:guid}/update"
@using Cas.SaaS.Contracts.Employee;
@using Cas.SaaS.Shared;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager navigationManager
@inject Helpers.HttpClientHelper Http
@attribute [Authorize(Roles = "Client")]

<PageTitle>Обновления данных сотрудника</PageTitle>

@if (status)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <div>
        <h4>Данные о сотруднике</h4>
        <hr />
        <EditForm Model="employeeUpdateDto" OnValidSubmit="OnValidSubmit">
            <dl class="row">
                <dt class="col-sm-2">
                    Имя
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@employeeUpdateDto.Name" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Фамилия
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@employeeUpdateDto.Surname" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Отчество
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@employeeUpdateDto.Patronymic" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Почтовый адрес
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@employeeUpdateDto.Email" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Номер телефона
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@employeeUpdateDto.Phone" />
                    </div>
                </dd>
            </dl>

            <button class="btn btn-primary" type="submit">Изменить</button>
            <button class="btn btn-secondary" type="button" @onclick="Clear">Очистить форму</button>
        </EditForm>
    </div>
}

@code {
    private bool status = false;

    [Parameter]
    public Guid employeeId { get; set; }

    private EmployeeDetailDto? employeeDetail;

    EmployeeUpdateDto employeeUpdateDto = new EmployeeUpdateDto();

    protected override async Task OnInitializedAsync()
    {
        employeeDetail = await Http.GetEmployeeByIdAsync(employeeId);

        employeeUpdateDto.Id = employeeDetail.Id;
        employeeUpdateDto.Name = employeeDetail.Name;
        employeeUpdateDto.Surname = employeeDetail.Surname;
        employeeUpdateDto.Patronymic = employeeDetail.Patronymic;
        employeeUpdateDto.Email = employeeDetail.Email;
        employeeUpdateDto.Phone = employeeDetail.Phone;
    }

    protected async Task OnValidSubmit()
    {
        status = false;

        var response = await Http.UpdateEmployeeAsync(employeeUpdateDto);

        var body = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // success
            Console.WriteLine($"the id of the employee is: {body}");
            navigationManager.NavigateTo($"/employee/{employeeId}/details");
        }
        else
        {
            // not success
            Console.WriteLine(body);
        }

        status = true;
    }

    private void Clear()
    {
        employeeUpdateDto = new EmployeeUpdateDto();
    }
}