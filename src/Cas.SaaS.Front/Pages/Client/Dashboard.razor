@page "/dashboard"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using Cas.SaaS.Contracts.Employee
@using Cas.SaaS.Contracts.Brigade
@using Cas.SaaS.Contracts.Client;
@inject Helpers.HttpClientHelper Http
@attribute [Authorize(Roles = "Client")]

<PageTitle>Панель управления</PageTitle>

<h2>Панель управления</h2>

<p>Добро пожаловать на панель инструментов!</p>

<div class ="container pt-5">
    <div class="row">
        <div class="col">
            <h5>Активные наряды</h5>
            @if (brigades is null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Загрузка...</span>
                    </div>
                </div>
            }
            else
            {
                @foreach (var brigade in brigades)
                {
                    @if (brigade.Status == Models.BrigadeStates.InProgress)
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Номер наряда</th>
                                    <th>Статус</th>
                                    <th>Действия</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>@brigade.NumberBrigade</td>
                                    <td>
                                        @switch (brigade.Status)
                                        {
                                            case Models.BrigadeStates.New:
                                                <span class="badge bg-primary">
                                                    Новая
                                                </span>
                                                break;

                                            case Models.BrigadeStates.InProgress:
                                                <span class="badge bg-warning">
                                                    В работе
                                                </span>
                                                break;

                                            case Models.BrigadeStates.CanceledByClient:
                                                <span class="badge bg-danger">
                                                    Отменена клиентом
                                                </span>
                                                break;

                                            case Models.BrigadeStates.RejectedByEmployee:
                                                <span class="badge bg-danger">
                                                    Отклонена сотрудником
                                                </span>
                                                break;

                                            case Models.BrigadeStates.Completed:
                                                <span class="badge bg-success">
                                                    Завершена
                                                </span>
                                                break;
                                        }
                                    </td>
                                    <th>
                                        <div class="row">
                                            <a href="/brigade/@brigade.Id/details" class="btn btn-info col text-white m-1">Детали</a>
                                        </div>
                                    </th>
                                </tr>
                            </tbody>
                        </table>
                    }
                }
            }
        </div>
        <div class="col">
            <h5>Сотрудники</h5>
            @if (employees is null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Загрузка...</span>
                    </div>
                </div>
            }
            else
            {
                <div>
                    @if (check)
                    {
                        <strong>Активные</strong>

                        <a @onclick="() => ChangeEmployee()"> / Все</a>
                    }
                    else
                    {
                        <a @onclick="() => ChangeEmployee()">Активные  / </a>

                        <strong>Все</strong>
                    }
                    <table class="table">
                        <thead>
                            <tr>
                                <th>ФИО</th>
                                <th>Номер телефона</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var employee in employeesSelected)
                            {
                                <tr>
                                    <td>@employee.Surname @employee.Name @employee.Patronymic</td>
                                    <td>@employee.Phone</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private EmployeeDto[]? employees;
    EmployeeDto[]? employeesSelected = new EmployeeDto[] {};
    private BrigadeDto[]? brigades;

    private bool check = true;

    protected override async Task OnInitializedAsync()
    {
        employees = await Http.GetEmployeesAsync();
        brigades = await Http.GetBrigadesAsync();
        if (check)
        {
            employeesSelected = employees.Where(x => x.IsActive == true).ToArray();
        }
        else
        {
            employeesSelected = employees;
        }
    }

    public async Task ChangeEmployee()
    {
        check = !check;
        await OnInitializedAsync();
    }
}
