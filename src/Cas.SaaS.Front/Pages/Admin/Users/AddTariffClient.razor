@page "/admin/user/{userId:guid}/tariff"
@using Cas.SaaS.Contracts.Delivery;
@using Cas.SaaS.Contracts.TariffPlan;
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Authorization;
@inject Helpers.HttpAdminHelper HttpAdmin
@inject Helpers.HttpAuthHelper HttpAuth
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Оформление заказа клиенту</PageTitle>

<h2>Оформление заказа клиента</h2>

@if (tariffs is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="clientAddDeliveryDto" OnValidSubmit="OnValidSubmit">

        <div class="form-group p-2">
            <div class="form-group">
                <label for="name">Идентификатор клиента</label>
                <div>
                    <InputText id="clientId" class="form-control" @bind-Value="@clientAddDeliveryDto.ClientId" readonly></InputText>
                </div>
            </div>

            <div class="form-group">
                <label for="name">Выберите тарифный план</label>
                <div>
                    <InputSelect @bind-Value="@clientAddDeliveryDto.TariffPlanId" id="tariffPlanId" class="form-control">
                        @foreach (var tariff in tariffs)
                        {
                            <option value="@tariff.Id">@tariff.Title</option>
                        }
                    </InputSelect>
                </div>
            </div>
        </div>

        <button class="btn btn-primary" type="submit">Добавить</button>
        <a class="btn btn-secondary" type="button" href="/admin/user/@userId/details">Вернуться назад</a>
        <button class="btn btn-secondary" type="button" @onclick="Clear">Очистить форму</button>

    </EditForm>

}
﻿
@code {
    [Parameter]
    public Guid userId { get; set; }

    private bool statusAddClient = false;

    DeliveryTariffAddDto clientAddDeliveryDto = new DeliveryTariffAddDto();
    private TariffPlanDto[]? tariffs;

    protected override async Task OnInitializedAsync()
    {
        tariffs = await HttpAuth.GetTariffPlansAsync();
        clientAddDeliveryDto.ClientId = userId.ToString();
    }

    protected async Task OnValidSubmit()
    {
        statusAddClient = false;

        var response = await HttpAdmin.AddDeliveryClientAsync(clientAddDeliveryDto);

        var body = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // success
            Console.WriteLine($"the id of the delivery is: {body}");
            navigationManager.NavigateTo($"/admin/user/{userId}/details");
        }
        else
        {
            // not success
            Console.WriteLine(body);
        }

        statusAddClient = true;
    }

    private void Clear()
    {
        clientAddDeliveryDto = new DeliveryTariffAddDto();
        clientAddDeliveryDto.ClientId = userId.ToString();
    }
}