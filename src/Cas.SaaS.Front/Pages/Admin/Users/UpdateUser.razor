@page "/admin/user/{userId:guid}/update"
@using Cas.SaaS.Contracts.User;
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Authorization;
@inject Helpers.HttpAdminHelper Http
@attribute [Authorize(Roles = "Admin")]
@inject NotificationService NotificationService

<PageTitle>Обновления данных пользователя</PageTitle>

@if (status)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <div>
        <h4>Данные о клиенте</h4>
        <hr />
        <EditForm Model="userUpdateDto" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <dl class="row">
                <dt class="col-sm-2">
                    Имя
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@userUpdateDto.Name" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Фамилия
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@userUpdateDto.Surname" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Отчество
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@userUpdateDto.Patronymic" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Почтовый адрес
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@userUpdateDto.Email" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Номер телефона
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="name" @bind-Value="@userUpdateDto.Phone" />
                    </div>
                </dd>
            </dl>

            <button class="btn btn-primary" type="submit">Изменить</button>
            <button class="btn btn-secondary" type="button" @onclick="Clear">Очистить форму</button>
        </EditForm>
    </div>
}

@code {
    private bool status = false;

    [Parameter]
    public Guid userId { get; set; }

    private UserDetailDto? userDetail;

    UserUpdateDto userUpdateDto = new UserUpdateDto();

    protected override async Task OnInitializedAsync()
    {
        userDetail = await Http.GetClientByIdAsync(userId);

        userUpdateDto.Id = userDetail.Id;
        userUpdateDto.Name = userDetail.Name;
        userUpdateDto.Surname = userDetail.Surname;
        userUpdateDto.Patronymic = userDetail.Patronymic;
        userUpdateDto.Email = userDetail.Email;
        userUpdateDto.Phone = userDetail.Phone;
    }

    protected async Task OnValidSubmit()
    {
        status = false;

        var response = await Http.UpdateUserAsync(userUpdateDto);

        var body = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // success
            Console.WriteLine($"the id of the user is: {body}");
            navigationManager.NavigateTo($"/admin/user/{userId}/details");
        }
        else
        {
            // not success
            Console.WriteLine(body);
            ShowNotificationError(body);
        }

        status = true;
    }

    private void Clear()
    {
        userUpdateDto = new UserUpdateDto();
    }

    void ShowNotificationError(string text)
    {
        var message = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Ошибка обновления!",
                Detail = text,
                Duration = 8000
            };
        NotificationService.Notify(message);
    }
}