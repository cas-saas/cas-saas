@page "/admin/tariff/{tariffId:guid}/update"
@using Cas.SaaS.Contracts.TariffPlan;
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Authorization;
@inject Helpers.HttpAdminHelper Http
@attribute [Authorize(Roles = "Admin")]
@inject NotificationService NotificationService

<PageTitle>Обновления данных тарифного плана</PageTitle>

@if (status)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <div>
        <h4>Данные о тарифном плане</h4>
        <hr />
        <EditForm Model="tariffPlanUpdateDto" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <dl class="row">
                <dt class="col-sm-2">
                    Заголовок
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputText class="form-control" id="title" @bind-Value="@tariffPlanUpdateDto.Title" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Период оплаты
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputNumber class="form-control" id="payment" @bind-Value="@tariffPlanUpdateDto.Payment" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Цена
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputNumber class="form-control" id="price" @bind-Value="@tariffPlanUpdateDto.Price" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Количество доступных сотрудников
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputNumber class="form-control" id="phone" @bind-Value="@tariffPlanUpdateDto.CountEmployees" />
                    </div>
                </dd>
                <dt class="col-sm-2">
                    Описание
                </dt>
                <dd class="col-sm-10">
                    <div>
                        <InputTextArea class="form-control" id="description" @bind-Value="@tariffPlanUpdateDto.Description" />
                    </div>
                </dd>
            </dl>

            <button class="btn btn-primary" type="submit">Изменить</button>
            <button class="btn btn-secondary" type="button" @onclick="Clear">Очистить форму</button>
        </EditForm>
    </div>
}

@code {
    private bool status = false;

    [Parameter]
    public Guid tariffId { get; set; }

    private TariffPlanDto? tariffPlanDto;

    TariffPlanUpdateDto tariffPlanUpdateDto = new TariffPlanUpdateDto();

    protected override async Task OnInitializedAsync()
    {
        tariffPlanDto = await Http.GetTariffPlanByIdAsync(tariffId);

        tariffPlanUpdateDto.Id = tariffPlanDto.Id;
        tariffPlanUpdateDto.Title = tariffPlanDto.Title;
        tariffPlanUpdateDto.Payment = tariffPlanDto.Payment;
        tariffPlanUpdateDto.Price = tariffPlanDto.Price;
        tariffPlanUpdateDto.Description = tariffPlanDto.Description;
        tariffPlanUpdateDto.CountEmployees = tariffPlanDto.CountEmployees;
    }

    protected async Task OnValidSubmit()
    {
        status = false;

        var response = await Http.UpdateTariffPlanAsync(tariffPlanUpdateDto);

        var body = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // success
            Console.WriteLine($"the id of the user is: {body}");
            navigationManager.NavigateTo($"/admin/tariffs");
        }
        else
        {
            // not success
            Console.WriteLine(body);
            ShowNotificationError(body);
        }

        status = true;
    }

    private void Clear()
    {
        tariffPlanUpdateDto = new TariffPlanUpdateDto();
    }

    void ShowNotificationError(string text)
    {
        var message = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Ошибка обновления!",
                Detail = text,
                Duration = 8000
            };
        NotificationService.Notify(message);
    }
}